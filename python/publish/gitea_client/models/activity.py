# coding: utf-8

"""
    Gitea API

    This documentation describes the Gitea API.  # noqa: E501

    OpenAPI spec version: 1.23.0+dev-531-g99d0510cb6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from publish.gitea_client.configuration import Configuration


class Activity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'act_user': 'User',
        'act_user_id': 'int',
        'comment': 'Comment',
        'comment_id': 'int',
        'content': 'str',
        'created': 'datetime',
        'id': 'int',
        'is_private': 'bool',
        'op_type': 'str',
        'ref_name': 'str',
        'repo': 'Repository',
        'repo_id': 'int',
        'user_id': 'int'
    }

    attribute_map = {
        'act_user': 'act_user',
        'act_user_id': 'act_user_id',
        'comment': 'comment',
        'comment_id': 'comment_id',
        'content': 'content',
        'created': 'created',
        'id': 'id',
        'is_private': 'is_private',
        'op_type': 'op_type',
        'ref_name': 'ref_name',
        'repo': 'repo',
        'repo_id': 'repo_id',
        'user_id': 'user_id'
    }

    def __init__(self, act_user=None, act_user_id=None, comment=None, comment_id=None, content=None, created=None, id=None, is_private=None, op_type=None, ref_name=None, repo=None, repo_id=None, user_id=None, _configuration=None):  # noqa: E501
        """Activity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._act_user = None
        self._act_user_id = None
        self._comment = None
        self._comment_id = None
        self._content = None
        self._created = None
        self._id = None
        self._is_private = None
        self._op_type = None
        self._ref_name = None
        self._repo = None
        self._repo_id = None
        self._user_id = None
        self.discriminator = None

        if act_user is not None:
            self.act_user = act_user
        if act_user_id is not None:
            self.act_user_id = act_user_id
        if comment is not None:
            self.comment = comment
        if comment_id is not None:
            self.comment_id = comment_id
        if content is not None:
            self.content = content
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if is_private is not None:
            self.is_private = is_private
        if op_type is not None:
            self.op_type = op_type
        if ref_name is not None:
            self.ref_name = ref_name
        if repo is not None:
            self.repo = repo
        if repo_id is not None:
            self.repo_id = repo_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def act_user(self):
        """Gets the act_user of this Activity.  # noqa: E501


        :return: The act_user of this Activity.  # noqa: E501
        :rtype: User
        """
        return self._act_user

    @act_user.setter
    def act_user(self, act_user):
        """Sets the act_user of this Activity.


        :param act_user: The act_user of this Activity.  # noqa: E501
        :type: User
        """

        self._act_user = act_user

    @property
    def act_user_id(self):
        """Gets the act_user_id of this Activity.  # noqa: E501


        :return: The act_user_id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._act_user_id

    @act_user_id.setter
    def act_user_id(self, act_user_id):
        """Sets the act_user_id of this Activity.


        :param act_user_id: The act_user_id of this Activity.  # noqa: E501
        :type: int
        """

        self._act_user_id = act_user_id

    @property
    def comment(self):
        """Gets the comment of this Activity.  # noqa: E501


        :return: The comment of this Activity.  # noqa: E501
        :rtype: Comment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Activity.


        :param comment: The comment of this Activity.  # noqa: E501
        :type: Comment
        """

        self._comment = comment

    @property
    def comment_id(self):
        """Gets the comment_id of this Activity.  # noqa: E501


        :return: The comment_id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this Activity.


        :param comment_id: The comment_id of this Activity.  # noqa: E501
        :type: int
        """

        self._comment_id = comment_id

    @property
    def content(self):
        """Gets the content of this Activity.  # noqa: E501


        :return: The content of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Activity.


        :param content: The content of this Activity.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def created(self):
        """Gets the created of this Activity.  # noqa: E501


        :return: The created of this Activity.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Activity.


        :param created: The created of this Activity.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Activity.  # noqa: E501


        :return: The id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.


        :param id: The id of this Activity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_private(self):
        """Gets the is_private of this Activity.  # noqa: E501


        :return: The is_private of this Activity.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Activity.


        :param is_private: The is_private of this Activity.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def op_type(self):
        """Gets the op_type of this Activity.  # noqa: E501

        the type of action  # noqa: E501

        :return: The op_type of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._op_type

    @op_type.setter
    def op_type(self, op_type):
        """Sets the op_type of this Activity.

        the type of action  # noqa: E501

        :param op_type: The op_type of this Activity.  # noqa: E501
        :type: str
        """
        allowed_values = ["create_repo", "rename_repo", "star_repo", "watch_repo", "commit_repo", "create_issue", "create_pull_request", "transfer_repo", "push_tag", "comment_issue", "merge_pull_request", "close_issue", "reopen_issue", "close_pull_request", "reopen_pull_request", "delete_tag", "delete_branch", "mirror_sync_push", "mirror_sync_create", "mirror_sync_delete", "approve_pull_request", "reject_pull_request", "comment_pull", "publish_release", "pull_review_dismissed", "pull_request_ready_for_review", "auto_merge_pull_request"]  # noqa: E501
        if (self._configuration.client_side_validation and
                op_type not in allowed_values):
            raise ValueError(
                "Invalid value for `op_type` ({0}), must be one of {1}"  # noqa: E501
                .format(op_type, allowed_values)
            )

        self._op_type = op_type

    @property
    def ref_name(self):
        """Gets the ref_name of this Activity.  # noqa: E501


        :return: The ref_name of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._ref_name

    @ref_name.setter
    def ref_name(self, ref_name):
        """Sets the ref_name of this Activity.


        :param ref_name: The ref_name of this Activity.  # noqa: E501
        :type: str
        """

        self._ref_name = ref_name

    @property
    def repo(self):
        """Gets the repo of this Activity.  # noqa: E501


        :return: The repo of this Activity.  # noqa: E501
        :rtype: Repository
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this Activity.


        :param repo: The repo of this Activity.  # noqa: E501
        :type: Repository
        """

        self._repo = repo

    @property
    def repo_id(self):
        """Gets the repo_id of this Activity.  # noqa: E501


        :return: The repo_id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._repo_id

    @repo_id.setter
    def repo_id(self, repo_id):
        """Sets the repo_id of this Activity.


        :param repo_id: The repo_id of this Activity.  # noqa: E501
        :type: int
        """

        self._repo_id = repo_id

    @property
    def user_id(self):
        """Gets the user_id of this Activity.  # noqa: E501


        :return: The user_id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Activity.


        :param user_id: The user_id of this Activity.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Activity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Activity):
            return True

        return self.to_dict() != other.to_dict()
