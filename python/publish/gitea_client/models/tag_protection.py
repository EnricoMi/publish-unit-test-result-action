# coding: utf-8

"""
    Gitea API

    This documentation describes the Gitea API.  # noqa: E501

    OpenAPI spec version: 1.23.0+dev-531-g99d0510cb6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from publish.gitea_client.configuration import Configuration


class TagProtection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'id': 'int',
        'name_pattern': 'str',
        'updated_at': 'datetime',
        'whitelist_teams': 'list[str]',
        'whitelist_usernames': 'list[str]'
    }

    attribute_map = {
        'created_at': 'created_at',
        'id': 'id',
        'name_pattern': 'name_pattern',
        'updated_at': 'updated_at',
        'whitelist_teams': 'whitelist_teams',
        'whitelist_usernames': 'whitelist_usernames'
    }

    def __init__(self, created_at=None, id=None, name_pattern=None, updated_at=None, whitelist_teams=None, whitelist_usernames=None, _configuration=None):  # noqa: E501
        """TagProtection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._id = None
        self._name_pattern = None
        self._updated_at = None
        self._whitelist_teams = None
        self._whitelist_usernames = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if name_pattern is not None:
            self.name_pattern = name_pattern
        if updated_at is not None:
            self.updated_at = updated_at
        if whitelist_teams is not None:
            self.whitelist_teams = whitelist_teams
        if whitelist_usernames is not None:
            self.whitelist_usernames = whitelist_usernames

    @property
    def created_at(self):
        """Gets the created_at of this TagProtection.  # noqa: E501


        :return: The created_at of this TagProtection.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TagProtection.


        :param created_at: The created_at of this TagProtection.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this TagProtection.  # noqa: E501


        :return: The id of this TagProtection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TagProtection.


        :param id: The id of this TagProtection.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name_pattern(self):
        """Gets the name_pattern of this TagProtection.  # noqa: E501


        :return: The name_pattern of this TagProtection.  # noqa: E501
        :rtype: str
        """
        return self._name_pattern

    @name_pattern.setter
    def name_pattern(self, name_pattern):
        """Sets the name_pattern of this TagProtection.


        :param name_pattern: The name_pattern of this TagProtection.  # noqa: E501
        :type: str
        """

        self._name_pattern = name_pattern

    @property
    def updated_at(self):
        """Gets the updated_at of this TagProtection.  # noqa: E501


        :return: The updated_at of this TagProtection.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TagProtection.


        :param updated_at: The updated_at of this TagProtection.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def whitelist_teams(self):
        """Gets the whitelist_teams of this TagProtection.  # noqa: E501


        :return: The whitelist_teams of this TagProtection.  # noqa: E501
        :rtype: list[str]
        """
        return self._whitelist_teams

    @whitelist_teams.setter
    def whitelist_teams(self, whitelist_teams):
        """Sets the whitelist_teams of this TagProtection.


        :param whitelist_teams: The whitelist_teams of this TagProtection.  # noqa: E501
        :type: list[str]
        """

        self._whitelist_teams = whitelist_teams

    @property
    def whitelist_usernames(self):
        """Gets the whitelist_usernames of this TagProtection.  # noqa: E501


        :return: The whitelist_usernames of this TagProtection.  # noqa: E501
        :rtype: list[str]
        """
        return self._whitelist_usernames

    @whitelist_usernames.setter
    def whitelist_usernames(self, whitelist_usernames):
        """Sets the whitelist_usernames of this TagProtection.


        :param whitelist_usernames: The whitelist_usernames of this TagProtection.  # noqa: E501
        :type: list[str]
        """

        self._whitelist_usernames = whitelist_usernames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagProtection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagProtection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagProtection):
            return True

        return self.to_dict() != other.to_dict()
