# coding: utf-8

"""
    Gitea API

    This documentation describes the Gitea API.  # noqa: E501

    OpenAPI spec version: 1.23.0+dev-531-g99d0510cb6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from publish.gitea_client.configuration import Configuration


class ActionTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'display_title': 'str',
        'event': 'str',
        'head_branch': 'str',
        'head_sha': 'str',
        'id': 'int',
        'name': 'str',
        'run_number': 'int',
        'run_started_at': 'datetime',
        'status': 'str',
        'updated_at': 'datetime',
        'url': 'str',
        'workflow_id': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'display_title': 'display_title',
        'event': 'event',
        'head_branch': 'head_branch',
        'head_sha': 'head_sha',
        'id': 'id',
        'name': 'name',
        'run_number': 'run_number',
        'run_started_at': 'run_started_at',
        'status': 'status',
        'updated_at': 'updated_at',
        'url': 'url',
        'workflow_id': 'workflow_id'
    }

    def __init__(self, created_at=None, display_title=None, event=None, head_branch=None, head_sha=None, id=None, name=None, run_number=None, run_started_at=None, status=None, updated_at=None, url=None, workflow_id=None, _configuration=None):  # noqa: E501
        """ActionTask - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._display_title = None
        self._event = None
        self._head_branch = None
        self._head_sha = None
        self._id = None
        self._name = None
        self._run_number = None
        self._run_started_at = None
        self._status = None
        self._updated_at = None
        self._url = None
        self._workflow_id = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if display_title is not None:
            self.display_title = display_title
        if event is not None:
            self.event = event
        if head_branch is not None:
            self.head_branch = head_branch
        if head_sha is not None:
            self.head_sha = head_sha
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if run_number is not None:
            self.run_number = run_number
        if run_started_at is not None:
            self.run_started_at = run_started_at
        if status is not None:
            self.status = status
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url
        if workflow_id is not None:
            self.workflow_id = workflow_id

    @property
    def created_at(self):
        """Gets the created_at of this ActionTask.  # noqa: E501


        :return: The created_at of this ActionTask.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActionTask.


        :param created_at: The created_at of this ActionTask.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def display_title(self):
        """Gets the display_title of this ActionTask.  # noqa: E501


        :return: The display_title of this ActionTask.  # noqa: E501
        :rtype: str
        """
        return self._display_title

    @display_title.setter
    def display_title(self, display_title):
        """Sets the display_title of this ActionTask.


        :param display_title: The display_title of this ActionTask.  # noqa: E501
        :type: str
        """

        self._display_title = display_title

    @property
    def event(self):
        """Gets the event of this ActionTask.  # noqa: E501


        :return: The event of this ActionTask.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ActionTask.


        :param event: The event of this ActionTask.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def head_branch(self):
        """Gets the head_branch of this ActionTask.  # noqa: E501


        :return: The head_branch of this ActionTask.  # noqa: E501
        :rtype: str
        """
        return self._head_branch

    @head_branch.setter
    def head_branch(self, head_branch):
        """Sets the head_branch of this ActionTask.


        :param head_branch: The head_branch of this ActionTask.  # noqa: E501
        :type: str
        """

        self._head_branch = head_branch

    @property
    def head_sha(self):
        """Gets the head_sha of this ActionTask.  # noqa: E501


        :return: The head_sha of this ActionTask.  # noqa: E501
        :rtype: str
        """
        return self._head_sha

    @head_sha.setter
    def head_sha(self, head_sha):
        """Sets the head_sha of this ActionTask.


        :param head_sha: The head_sha of this ActionTask.  # noqa: E501
        :type: str
        """

        self._head_sha = head_sha

    @property
    def id(self):
        """Gets the id of this ActionTask.  # noqa: E501


        :return: The id of this ActionTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionTask.


        :param id: The id of this ActionTask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ActionTask.  # noqa: E501


        :return: The name of this ActionTask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionTask.


        :param name: The name of this ActionTask.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def run_number(self):
        """Gets the run_number of this ActionTask.  # noqa: E501


        :return: The run_number of this ActionTask.  # noqa: E501
        :rtype: int
        """
        return self._run_number

    @run_number.setter
    def run_number(self, run_number):
        """Sets the run_number of this ActionTask.


        :param run_number: The run_number of this ActionTask.  # noqa: E501
        :type: int
        """

        self._run_number = run_number

    @property
    def run_started_at(self):
        """Gets the run_started_at of this ActionTask.  # noqa: E501


        :return: The run_started_at of this ActionTask.  # noqa: E501
        :rtype: datetime
        """
        return self._run_started_at

    @run_started_at.setter
    def run_started_at(self, run_started_at):
        """Sets the run_started_at of this ActionTask.


        :param run_started_at: The run_started_at of this ActionTask.  # noqa: E501
        :type: datetime
        """

        self._run_started_at = run_started_at

    @property
    def status(self):
        """Gets the status of this ActionTask.  # noqa: E501


        :return: The status of this ActionTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActionTask.


        :param status: The status of this ActionTask.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this ActionTask.  # noqa: E501


        :return: The updated_at of this ActionTask.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ActionTask.


        :param updated_at: The updated_at of this ActionTask.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this ActionTask.  # noqa: E501


        :return: The url of this ActionTask.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ActionTask.


        :param url: The url of this ActionTask.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def workflow_id(self):
        """Gets the workflow_id of this ActionTask.  # noqa: E501


        :return: The workflow_id of this ActionTask.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this ActionTask.


        :param workflow_id: The workflow_id of this ActionTask.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionTask):
            return True

        return self.to_dict() != other.to_dict()
