# coding: utf-8

"""
    Gitea API

    This documentation describes the Gitea API.  # noqa: E501

    OpenAPI spec version: 1.23.0+dev-531-g99d0510cb6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from publish.gitea_client.configuration import Configuration


class MarkupOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'file_path': 'str',
        'mode': 'str',
        'text': 'str',
        'wiki': 'bool'
    }

    attribute_map = {
        'context': 'Context',
        'file_path': 'FilePath',
        'mode': 'Mode',
        'text': 'Text',
        'wiki': 'Wiki'
    }

    def __init__(self, context=None, file_path=None, mode=None, text=None, wiki=None, _configuration=None):  # noqa: E501
        """MarkupOption - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._context = None
        self._file_path = None
        self._mode = None
        self._text = None
        self._wiki = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if file_path is not None:
            self.file_path = file_path
        if mode is not None:
            self.mode = mode
        if text is not None:
            self.text = text
        if wiki is not None:
            self.wiki = wiki

    @property
    def context(self):
        """Gets the context of this MarkupOption.  # noqa: E501

        URL path for rendering issue, media and file links Expected format: /subpath/{user}/{repo}/src/{branch, commit, tag}/{identifier/path}/{file/dir}  in: body  # noqa: E501

        :return: The context of this MarkupOption.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MarkupOption.

        URL path for rendering issue, media and file links Expected format: /subpath/{user}/{repo}/src/{branch, commit, tag}/{identifier/path}/{file/dir}  in: body  # noqa: E501

        :param context: The context of this MarkupOption.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def file_path(self):
        """Gets the file_path of this MarkupOption.  # noqa: E501

        File path for detecting extension in file mode  in: body  # noqa: E501

        :return: The file_path of this MarkupOption.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this MarkupOption.

        File path for detecting extension in file mode  in: body  # noqa: E501

        :param file_path: The file_path of this MarkupOption.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def mode(self):
        """Gets the mode of this MarkupOption.  # noqa: E501

        Mode to render (comment, gfm, markdown, file)  in: body  # noqa: E501

        :return: The mode of this MarkupOption.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MarkupOption.

        Mode to render (comment, gfm, markdown, file)  in: body  # noqa: E501

        :param mode: The mode of this MarkupOption.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def text(self):
        """Gets the text of this MarkupOption.  # noqa: E501

        Text markup to render  in: body  # noqa: E501

        :return: The text of this MarkupOption.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MarkupOption.

        Text markup to render  in: body  # noqa: E501

        :param text: The text of this MarkupOption.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def wiki(self):
        """Gets the wiki of this MarkupOption.  # noqa: E501

        Is it a wiki page ?  in: body  # noqa: E501

        :return: The wiki of this MarkupOption.  # noqa: E501
        :rtype: bool
        """
        return self._wiki

    @wiki.setter
    def wiki(self, wiki):
        """Sets the wiki of this MarkupOption.

        Is it a wiki page ?  in: body  # noqa: E501

        :param wiki: The wiki of this MarkupOption.  # noqa: E501
        :type: bool
        """

        self._wiki = wiki

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarkupOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarkupOption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarkupOption):
            return True

        return self.to_dict() != other.to_dict()
