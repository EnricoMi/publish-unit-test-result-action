# coding: utf-8

"""
    Gitea API

    This documentation describes the Gitea API.  # noqa: E501

    OpenAPI spec version: 1.23.0+dev-531-g99d0510cb6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from publish.gitea_client.configuration import Configuration


class RepoCommit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'CommitUser',
        'committer': 'CommitUser',
        'message': 'str',
        'tree': 'CommitMeta',
        'url': 'str',
        'verification': 'PayloadCommitVerification'
    }

    attribute_map = {
        'author': 'author',
        'committer': 'committer',
        'message': 'message',
        'tree': 'tree',
        'url': 'url',
        'verification': 'verification'
    }

    def __init__(self, author=None, committer=None, message=None, tree=None, url=None, verification=None, _configuration=None):  # noqa: E501
        """RepoCommit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._author = None
        self._committer = None
        self._message = None
        self._tree = None
        self._url = None
        self._verification = None
        self.discriminator = None

        if author is not None:
            self.author = author
        if committer is not None:
            self.committer = committer
        if message is not None:
            self.message = message
        if tree is not None:
            self.tree = tree
        if url is not None:
            self.url = url
        if verification is not None:
            self.verification = verification

    @property
    def author(self):
        """Gets the author of this RepoCommit.  # noqa: E501


        :return: The author of this RepoCommit.  # noqa: E501
        :rtype: CommitUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this RepoCommit.


        :param author: The author of this RepoCommit.  # noqa: E501
        :type: CommitUser
        """

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this RepoCommit.  # noqa: E501


        :return: The committer of this RepoCommit.  # noqa: E501
        :rtype: CommitUser
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this RepoCommit.


        :param committer: The committer of this RepoCommit.  # noqa: E501
        :type: CommitUser
        """

        self._committer = committer

    @property
    def message(self):
        """Gets the message of this RepoCommit.  # noqa: E501


        :return: The message of this RepoCommit.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RepoCommit.


        :param message: The message of this RepoCommit.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def tree(self):
        """Gets the tree of this RepoCommit.  # noqa: E501


        :return: The tree of this RepoCommit.  # noqa: E501
        :rtype: CommitMeta
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this RepoCommit.


        :param tree: The tree of this RepoCommit.  # noqa: E501
        :type: CommitMeta
        """

        self._tree = tree

    @property
    def url(self):
        """Gets the url of this RepoCommit.  # noqa: E501


        :return: The url of this RepoCommit.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RepoCommit.


        :param url: The url of this RepoCommit.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def verification(self):
        """Gets the verification of this RepoCommit.  # noqa: E501


        :return: The verification of this RepoCommit.  # noqa: E501
        :rtype: PayloadCommitVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this RepoCommit.


        :param verification: The verification of this RepoCommit.  # noqa: E501
        :type: PayloadCommitVerification
        """

        self._verification = verification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepoCommit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepoCommit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepoCommit):
            return True

        return self.to_dict() != other.to_dict()
