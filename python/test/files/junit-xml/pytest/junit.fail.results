publish.unittestresults.ParsedUnitTestResults(
  files=1,
  errors=[],
  suites=1,
  suite_tests=5,
  suite_skipped=1,
  suite_failures=1,
  suite_errors=0,
  suite_time=2,
  suite_details=[
    publish.unittestresults.UnitTestSuite(
      name='pytest',
      tests=5,
      skipped=1,
      failures=1,
      errors=0,
      stdout=None,
      stderr=None
    )
  ],
  cases=[
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.fail.xml',
      test_file='test/test_spark.py',
      line=1412,
      class_name='test.test_spark.SparkTests',
      test_name='test_check_shape_compatibility',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.435
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.fail.xml',
      test_file='test/test_spark.py',
      line=1641,
      class_name='test.test_spark.SparkTests',
      test_name='test_get_available_devices',
      result='skipped',
      message='get_available_devices only supported in Spark 3.0 and above',
      content='/horovod/test/test_spark.py:1642: get_available_devices only\n        '
        '        supported in Spark 3.0 and above\n            ',
      stdout=None,
      stderr=None,
      time=0.001
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.fail.xml',
      test_file='test/test_spark.py',
      line=1102,
      class_name='test.test_spark.SparkTests',
      test_name='test_get_col_info',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.417
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.fail.xml',
      test_file='test/test_spark.py',
      line=819,
      class_name='test.test_spark.SparkTests',
      test_name='test_rsh_events',
      result='failure',
      message='self = <test_spark.SparkTests testMethod=test_rsh_events>      def '
        'test_rsh_events(self): >       self.do_test_rsh_events(3)  '
        'test_spark.py:821:  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '
        '_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  test_spark.py:836: in '
        'do_test_rsh_events     self.do_test_rsh(command, 143, events=events) '
        'test_spark.py:852: in do_test_rsh     '
        'self.assertEqual(expected_result, res) E   AssertionError: 143 != 0',
      content='self = <test_spark.SparkTests testMethod=test_rsh_events>\n\n          '
        '      def test_rsh_events(self):\n                > '
        'self.do_test_rsh_events(3)\n\n                test_spark.py:821:\n    '
        '            _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '
        '_ _ _ _ _ _ _ _ _ _ _ _\n                test_spark.py:836: in '
        'do_test_rsh_events\n                self.do_test_rsh(command, 143, '
        'events=events)\n                test_spark.py:852: in do_test_rsh\n   '
        '             self.assertEqual(expected_result, res)\n                '
        'E AssertionError: 143 != 0\n            ',
      stdout=None,
      stderr=None,
      time=7.541
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.fail.xml',
      test_file='test/test_spark.py',
      line=813,
      class_name='test.test_spark.SparkTests',
      test_name='test_rsh_with_non_zero_exit_code',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.514
    )
  ]
)