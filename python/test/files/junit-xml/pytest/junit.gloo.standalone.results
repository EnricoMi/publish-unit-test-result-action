publish.unittestresults.ParsedUnitTestResults(
  files=1,
  errors=[],
  suites=1,
  suite_tests=97,
  suite_skipped=17,
  suite_failures=0,
  suite_errors=0,
  suite_time=205,
  suite_details=[
    publish.unittestresults.UnitTestSuite(
      name='pytest',
      tests=97,
      skipped=17,
      failures=0,
      errors=0,
      stdout=None,
      stderr=None
    )
  ],
  cases=[
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1408,
      class_name='test.test_spark.SparkTests',
      test_name='test_check_shape_compatibility',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.389
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1016,
      class_name='test.test_spark.SparkTests',
      test_name='test_df_cache',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=7.311
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=119,
      class_name='test.test_spark.SparkTests',
      test_name='test_driver_common_interfaces',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.508
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=140,
      class_name='test.test_spark.SparkTests',
      test_name='test_driver_common_interfaces_fails',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.509
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=127,
      class_name='test.test_spark.SparkTests',
      test_name='test_driver_common_interfaces_from_settings',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.507
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=152,
      class_name='test.test_spark.SparkTests',
      test_name='test_driver_set_local_rank_to_index',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.51
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1637,
      class_name='test.test_spark.SparkTests',
      test_name='test_get_available_devices',
      result='skipped',
      message='get_available_devices only supported in Spark 3.0 and above',
      content='/horovod/test/test_spark.py:1638: get_available_devices only '
        'supported in Spark 3.0 and above',
      stdout=None,
      stderr=None,
      time=0.001
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1098,
      class_name='test.test_spark.SparkTests',
      test_name='test_get_col_info',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=5.967
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1147,
      class_name='test.test_spark.SparkTests',
      test_name='test_get_col_info_error_bad_shape',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.228
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1159,
      class_name='test.test_spark.SparkTests',
      test_name='test_get_col_info_error_bad_size',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.974
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1216,
      class_name='test.test_spark.SparkTests',
      test_name='test_get_metadata',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.566
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=921,
      class_name='test.test_spark.SparkTests',
      test_name='test_gloo_exec_fn',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=941,
      class_name='test.test_spark.SparkTests',
      test_name='test_gloo_exec_fn_provides_driver_with_local_rank',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.052
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=363,
      class_name='test.test_spark.SparkTests',
      test_name='test_happy_run_elastic',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=11.536
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=338,
      class_name='test.test_spark.SparkTests',
      test_name='test_happy_run_with_gloo',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=10.494
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=329,
      class_name='test.test_spark.SparkTests',
      test_name='test_happy_run_with_mpi',
      result='skipped',
      message='Open MPI is not available',
      content='/horovod/test/test_spark.py:330: Open MPI is not available',
      stdout=None,
      stderr=None,
      time=1.415
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1505,
      class_name='test.test_spark.SparkTests',
      test_name='test_hdfs_store_parse_url',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=91,
      class_name='test.test_spark.SparkTests',
      test_name='test_host_hash',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.002
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=936,
      class_name='test.test_spark.SparkTests',
      test_name='test_mpi_exec_fn_provides_driver_with_local_rank',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.034
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=849,
      class_name='test.test_spark.SparkTests',
      test_name='test_mpirun_exec_fn',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.011
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=414,
      class_name='test.test_spark.SparkTests',
      test_name='test_mpirun_not_found',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=4.391
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1336,
      class_name='test.test_spark.SparkTests',
      test_name='test_prepare_data_compress_sparse',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.877
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1265,
      class_name='test.test_spark.SparkTests',
      test_name='test_prepare_data_no_compression',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.206
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=812,
      class_name='test.test_spark.SparkTests',
      test_name='test_rsh_event',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=2.517
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=815,
      class_name='test.test_spark.SparkTests',
      test_name='test_rsh_events',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=7.539
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=809,
      class_name='test.test_spark.SparkTests',
      test_name='test_rsh_with_non_zero_exit_code',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.513
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=806,
      class_name='test.test_spark.SparkTests',
      test_name='test_rsh_with_zero_exit_code',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.513
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=993,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_driver_host_discovery',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.509
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=492,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_defaults_num_proc_to_spark_cores_with_gloo',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.829
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=485,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_defaults_num_proc_to_spark_cores_with_mpi',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.723
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=512,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_does_not_default_env_to_os_env_with_gloo',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.823
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=505,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_does_not_default_env_to_os_env_with_mpi',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.85
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=459,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_num_proc_precedes_spark_cores_with_gloo',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.875
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=452,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_num_proc_precedes_spark_cores_with_mpi',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.889
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=433,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_with_gloo',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.972
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=426,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_with_mpi',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.948
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=548,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_with_non_zero_exit_with_gloo',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.733
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=539,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_with_non_zero_exit_with_mpi',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.84
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=529,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_with_os_environ_with_mpi',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.87
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=472,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_run_with_path_with_mpi',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.828
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1614,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_task_service_abort_command',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.514
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1630,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_task_service_abort_no_command',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.713
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1568,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_task_service_env',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.011
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1608,
      class_name='test.test_spark.SparkTests',
      test_name='test_spark_task_service_execute_command',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.711
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1466,
      class_name='test.test_spark.SparkTests',
      test_name='test_sync_hdfs_store',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=262,
      class_name='test.test_spark.SparkTests',
      test_name='test_task_fn_run_commands',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.407
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=295,
      class_name='test.test_spark.SparkTests',
      test_name='test_task_fn_run_gloo_exec',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.347
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=205,
      class_name='test.test_spark.SparkTests',
      test_name='test_task_service_check_for_command_start',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.029
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=183,
      class_name='test.test_spark.SparkTests',
      test_name='test_task_service_wait_for_command_start_with_timeout',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.017
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=175,
      class_name='test.test_spark.SparkTests',
      test_name='test_task_service_wait_for_command_start_without_timeout',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.509
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=392,
      class_name='test.test_spark.SparkTests',
      test_name='test_timeout_with_gloo',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=9.259
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=383,
      class_name='test.test_spark.SparkTests',
      test_name='test_timeout_with_mpi',
      result='skipped',
      message='Open MPI is not available',
      content='/horovod/test/test_spark.py:384: Open MPI is not available',
      stdout=None,
      stderr=None,
      time=1.325
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1649,
      class_name='test.test_spark.SparkTests',
      test_name='test_to_list',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.003
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1201,
      class_name='test.test_spark.SparkTests',
      test_name='test_train_val_split_col_boolean',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.255
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1186,
      class_name='test.test_spark.SparkTests',
      test_name='test_train_val_split_col_integer',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.333
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_spark.py',
      line=1171,
      class_name='test.test_spark.SparkTests',
      test_name='test_train_val_split_ratio',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=3.86
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=74,
      class_name='test.test_run.RunTests',
      test_name='test_autotune_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=93,
      class_name='test.test_run.RunTests',
      test_name='test_autotuning_with_fixed_param',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=165,
      class_name='test.test_run.RunTests',
      test_name='test_config_file',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.009
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=207,
      class_name='test.test_run.RunTests',
      test_name='test_config_file_override_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.007
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=864,
      class_name='test.test_run.RunTests',
      test_name='test_generate_jsrun_rankfile',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.003
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=427,
      class_name='test.test_run.RunTests',
      test_name='test_get_mpi_implementation',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=790,
      class_name='test.test_run.RunTests',
      test_name='test_gloo_run_minimal',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.194
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=801,
      class_name='test.test_run.RunTests',
      test_name='test_gloo_run_with_os_environ',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.2
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=415,
      class_name='test.test_run.RunTests',
      test_name='test_hash',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.002
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=809,
      class_name='test.test_run.RunTests',
      test_name='test_horovodrun_hostfile',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.002
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=419,
      class_name='test.test_run.RunTests',
      test_name='test_host_hash',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.002
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=224,
      class_name='test.test_run.RunTests',
      test_name='test_in_thread_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=821,
      class_name='test.test_run.RunTests',
      test_name='test_js_run',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:822: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.537
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=139,
      class_name='test.test_run.RunTests',
      test_name='test_library_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=154,
      class_name='test.test_run.RunTests',
      test_name='test_logging_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=625,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_full',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:626: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.175
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=547,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_minimal',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:548: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.171
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=584,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_on_large_cluster',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:585: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.172
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=729,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_with_both_paths',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:730: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.171
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=705,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_with_both_pythonpaths',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:706: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.177
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=723,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_with_env_path',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:724: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.18
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=699,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_with_env_pythonpath',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:700: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.181
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=754,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_with_non_zero_exit',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:755: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.189
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=772,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_with_os_environ',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:773: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.184
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=717,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_with_sys_path',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:718: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.182
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=693,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_with_sys_pythonpath',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:694: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.188
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=711,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_without_path',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:712: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.194
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=687,
      class_name='test.test_run.RunTests',
      test_name='test_mpi_run_without_pythonpath',
      result='skipped',
      message='MPI is not available',
      content='/horovod/test/test_run.py:688: MPI is not available',
      stdout=None,
      stderr=None,
      time=0.192
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=249,
      class_name='test.test_run.RunTests',
      test_name='test_on_event',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.218
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=57,
      class_name='test.test_run.RunTests',
      test_name='test_params_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=453,
      class_name='test.test_run.RunTests',
      test_name='test_run_controller',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.706
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=896,
      class_name='test.test_run.RunTests',
      test_name='test_run_with_jsrun',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.006
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=350,
      class_name='test.test_run.RunTests',
      test_name='test_safe_shell_exec_captures_last_line_wo_eol',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.181
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=347,
      class_name='test.test_run.RunTests',
      test_name='test_safe_shell_exec_captures_stderr',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.177
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=344,
      class_name='test.test_run.RunTests',
      test_name='test_safe_shell_exec_captures_stdout',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.182
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=357,
      class_name='test.test_run.RunTests',
      test_name='test_safe_shell_exec_interrupts_on_event',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.029
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=371,
      class_name='test.test_run.RunTests',
      test_name='test_safe_shell_exec_interrupts_on_parent_shutdown',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.209
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=354,
      class_name='test.test_run.RunTests',
      test_name='test_safe_shell_exec_returns_exit_code',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.209
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=119,
      class_name='test.test_run.RunTests',
      test_name='test_stall_check_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.006
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=108,
      class_name='test.test_run.RunTests',
      test_name='test_timeline_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.gloo.standalone.xml',
      test_file='test/test_run.py',
      line=217,
      class_name='test.test_run.RunTests',
      test_name='test_validate_config_args',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    )
  ]
)