publish.unittestresults.ParsedUnitTestResults(
  files=1,
  errors=[],
  suites=1,
  suite_tests=35,
  suite_skipped=2,
  suite_failures=0,
  suite_errors=0,
  suite_time=165,
  suite_details=[
    publish.unittestresults.UnitTestSuite(
      name='pytest',
      tests=35,
      skipped=2,
      failures=0,
      errors=0,
      stdout=None,
      stderr=None
    )
  ],
  cases=[
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=454,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_batch_generator_fn',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.006
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=385,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_calculate_shuffle_buffer_size',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=371,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_calculate_shuffle_buffer_size_small_row_size',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=410,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_convert_custom_sparse_to_dense_bare_keras_fn',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.004
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=399,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_custom_sparse_to_dense_fn',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.041
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=75,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_fit_model',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=14.352
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=103,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_fit_model_multiclass',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=34.284
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=186,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_keras_direct_parquet_train',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=11.54
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=225,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_keras_model_checkpoint_callback',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=14.137
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=322,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_model_serialization',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.851
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=575,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_prep_data_tf_keras_fn_with_sparse_col',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.051
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=612,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_prep_data_tf_keras_fn_without_sparse_col',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.032
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=416,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_prepare_data_bare_keras_fn',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.004
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=528,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_reshape',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.039
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=139,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_restore_from_checkpoint',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=7.23
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_keras.py',
      line=361,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_serialize_param_value',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.003
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='../usr/local/lib/python3.6/dist-packages/tensorflow_core/python/'
        'framework/test_util.py',
      line=2075,
      class_name='test.test_spark_keras.SparkKerasTests',
      test_name='test_session',
      result='skipped',
      message='Not a test.',
      content='/usr/local/lib/python3.6/dist-packages/tensorflow_core/python/framewo'
        'rk/test_util.py:2076: Not a test.',
      stdout=None,
      stderr=None,
      time=0.003
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=372,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_calculate_loss_with_sample_weight',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.022
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=401,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_calculate_loss_without_sample_weight',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=198,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_calculate_shuffle_buffer_size',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=184,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_calculate_shuffle_buffer_size_small_row_size',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.004
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=227,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_construct_metric_value_holders_one_metric_for_all_labels',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.003
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=73,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_fit_model',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=12.786
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=269,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_get_metric_avgs',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.007
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=433,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_happy_run_elastic',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=9.165
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=447,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_happy_run_elastic_fault_tolerant',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=23.934
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=468,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_happy_run_elastic_fault_tolerant_fails',
      result='skipped',
      message='elastic horovod does not support shutdown from the spark driver '
        'while elastic driver is waiting for hosts to come up',
      content='/horovod/test/test_spark_torch.py:469: elastic horovod does not '
        'support shutdown from the spark driver while elastic driver is '
        'waiting for hosts to come up',
      stdout=None,
      stderr=None,
      time=0.003
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=213,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_metric_class',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.026
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=251,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_prepare_np_data',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.319
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=167,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_pytorch_get_optimizer_with_unscaled_lr',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.005
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=103,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_restore_from_checkpoint',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=7.198
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=335,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_torch_direct_parquet_train',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=8.305
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=325,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_torch_param_serialize',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.002
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=140,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_transform_multi_class',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=6.549
    ),
    publish.unittestresults.UnitTestCase(
      result_file='pytest/junit.spark.integration.1.xml',
      test_file='test/test_spark_torch.py',
      line=291,
      class_name='test.test_spark_torch.SparkTorchTests',
      test_name='test_update_metrics',
      result='success',
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=0.008
    )
  ]
)