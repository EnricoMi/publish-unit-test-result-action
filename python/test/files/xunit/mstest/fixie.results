publish.unittestresults.ParsedUnitTestResults(
  files=1,
  errors=[],
  suites=2,
  suite_tests=7,
  suite_skipped=1,
  suite_failures=3,
  suite_errors=0,
  suite_flaky=0,
  suite_rerun=0,
  suite_time=8,
  suite_details=[
    publish.unittestresults.UnitTestSuite(
      name='[genericTestClass]',
      tests=3,
      skipped=0,
      failures=1,
      errors=0,
      flaky=0,
      rerun=0,
      stdout=None,
      stderr=None
    ),
    publish.unittestresults.UnitTestSuite(
      name='[testClass]',
      tests=4,
      skipped=1,
      failures=2,
      errors=0,
      flaky=0,
      rerun=0,
      stdout=None,
      stderr=None
    )
  ],
  cases=[
    publish.unittestresults.UnitTestCase(
      result_file='mstest/fixie.xml',
      test_file=None,
      line=None,
      class_name='[genericTestClass]',
      test_name='ShouldBeString',
      result='success',
      is_flaky=False,
      is_rerun=False,
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.234
    ),
    publish.unittestresults.UnitTestCase(
      result_file='mstest/fixie.xml',
      test_file=None,
      line=None,
      class_name='[genericTestClass]',
      test_name='ShouldBeString',
      result='success',
      is_flaky=False,
      is_rerun=False,
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.234
    ),
    publish.unittestresults.UnitTestCase(
      result_file='mstest/fixie.xml',
      test_file=None,
      line=None,
      class_name='[genericTestClass]',
      test_name='ShouldBeString',
      result='failure',
      is_flaky=False,
      is_rerun=False,
      message='Expected: System.String\nActual:   System.Int32',
      content='Expected: System.String\nActual:   System.Int32   at '
        '[genericTestClassForStackTrace].ShouldBeString[T](T genericArgument) '
        'in [fileLocation]:line #',
      stdout=None,
      stderr=None,
      time=1.234
    ),
    publish.unittestresults.UnitTestCase(
      result_file='mstest/fixie.xml',
      test_file=None,
      line=None,
      class_name='[testClass]',
      test_name='Fail',
      result='failure',
      is_flaky=False,
      is_rerun=False,
      message="'Fail' failed!",
      content="'Fail' failed!   at [testClassForStackTrace].Fail() in "
        "[fileLocation]:line #",
      stdout=None,
      stderr=None,
      time=1.234
    ),
    publish.unittestresults.UnitTestCase(
      result_file='mstest/fixie.xml',
      test_file=None,
      line=None,
      class_name='[testClass]',
      test_name='FailByAssertion',
      result='failure',
      is_flaky=False,
      is_rerun=False,
      message='Expected: 2\nActual:   1',
      content='Expected: 2\nActual:   1   at '
        '[testClassForStackTrace].FailByAssertion() in [fileLocation]:line #',
      stdout=None,
      stderr=None,
      time=1.234
    ),
    publish.unittestresults.UnitTestCase(
      result_file='mstest/fixie.xml',
      test_file=None,
      line=None,
      class_name='[testClass]',
      test_name='Pass',
      result='success',
      is_flaky=False,
      is_rerun=False,
      message=None,
      content=None,
      stdout=None,
      stderr=None,
      time=1.234
    ),
    publish.unittestresults.UnitTestCase(
      result_file='mstest/fixie.xml',
      test_file=None,
      line=None,
      class_name='[testClass]',
      test_name='Skip',
      result='skipped',
      is_flaky=False,
      is_rerun=False,
      message='âš  Skipped with attribute.',
      content=None,
      stdout=None,
      stderr=None,
      time=1.234
    )
  ]
)