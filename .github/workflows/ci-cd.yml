name: CI/CD

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  schedule:
    - cron: '0 16 * * *'
  workflow_dispatch:
permissions: {}

jobs:
  test:
    name: Test (python-${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        os:
          - macos-10.15
          - macos-11
          - macos-latest
          - ubuntu-18.04
          - ubuntu-20.04
          - ubuntu-latest
          - windows-2019
          - windows-2022
          - windows-latest
        python-version: ["3.8"]

        include:
          - os: macos-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.10"

          - os: macos-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.9"

          - os: macos-latest
            python-version: "3.7"
          - os: ubuntu-latest
            python-version: "3.7"
          - os: windows-latest
            python-version: "3.7"

          - os: macos-latest
            python-version: "3.6"
          - os: ubuntu-latest
            python-version: "3.6"
          - os: windows-latest
            python-version: "3.6"

    steps:
      - name: Setup Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install language-pack-en language-pack-de

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade --force --no-cache-dir pip
          pip install --force --no-cache-dir -r python/requirements.txt
          pip install --force --no-cache-dir -r python/test/requirements.txt -c python/test/constraints.txt

      - name: PyTest
        env:
          PYTHONPATH: ..
        run: |
          cd python/test
          python -m pytest --capture=tee-sys --continue-on-collection-errors --junit-xml ../../test-results/pytest.xml

      - name: PyTest (EST)
        env:
          TZ: US/Eastern
          PYTHONPATH: ..
        run: |
          cd python/test
          python -m pytest --capture=tee-sys --continue-on-collection-errors --junit-xml ../../test-results/pytest-est.xml

      - name: PyTest (AEST)
        env:
          TZ: Australia/Canberra
          PYTHONPATH: ..
        run: |
          cd python/test
          python -m pytest --capture=tee-sys --continue-on-collection-errors --junit-xml ../../test-results/pytest-aest.xml

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results (python-${{ matrix.python-version }}, ${{ matrix.os }})
          path: |
            test-results/*.xml
            unit-test-results.json

  publish-dockerfile:
    name: Publish Test Results (Dockerfile)
    needs: test
    # we run the action from this branch whenever we can (when it runs in our repo's context)
    if: >
      always() &&
      github.event.sender.login != 'dependabot[bot]' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare publish action from this branch
        run: |
          sed --in-place "s/image: .*/image: 'Dockerfile'/" action.yml

      - name: Publish Test Results
        uses: ./
        with:
          check_name: Test Results (Dockerfile)
          files: "artifacts/**/*.xml"
          LOG_LEVEL: DEBUG

  publish-docker-image:
    name: Publish Test Results (Docker Image)
    needs: test
    # we run the action from this branch whenever we can (when it runs in our repo's context)
    if: >
      always() &&
      github.event.sender.login != 'dependabot[bot]' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v2
        with:
          load: true
          push: false
          tags: enricomi/publish-unit-test-result-action:latest
          outputs: type=docker

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish Test Results
        if: always()
        run: |
          docker run --workdir $GITHUB_WORKSPACE --rm -e INPUT_CHECK_NAME -e INPUT_FILES -e INPUT_TIME_UNIT -e INPUT_GITHUB_TOKEN -e INPUT_GITHUB_RETRIES -e INPUT_COMMIT -e INPUT_COMMENT_TITLE -e INPUT_FAIL_ON -e INPUT_REPORT_INDIVIDUAL_RUNS -e INPUT_DEDUPLICATE_CLASSES_BY_FILE_NAME -e INPUT_IGNORE_RUNS -e INPUT_HIDE_COMMENTS -e INPUT_COMMENT_ON_PR -e INPUT_COMMENT_MODE -e INPUT_COMPARE_TO_EARLIER_COMMIT -e INPUT_PULL_REQUEST_BUILD -e INPUT_EVENT_FILE -e INPUT_EVENT_NAME -e INPUT_TEST_CHANGES_LIMIT -e INPUT_CHECK_RUN_ANNOTATIONS -e INPUT_CHECK_RUN_ANNOTATIONS_BRANCH -e INPUT_SECONDS_BETWEEN_GITHUB_READS -e INPUT_SECONDS_BETWEEN_GITHUB_WRITES -e INPUT_JSON_FILE -e INPUT_JOB_SUMMARY -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_RETENTION_DAYS -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_WORKSPACE -e GITHUB_ACTION -e GITHUB_EVENT_PATH -e GITHUB_ACTION_REPOSITORY -e GITHUB_ACTION_REF -e GITHUB_PATH -e GITHUB_ENV -e GITHUB_STEP_SUMMARY -e RUNNER_OS -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e GITHUB_ACTIONS=true -e CI=true -v "/var/run/docker.sock":"/var/run/docker.sock" -v "$RUNNER_TEMP":"$RUNNER_TEMP" -v "$GITHUB_WORKSPACE":"$GITHUB_WORKSPACE" enricomi/publish-unit-test-result-action:latest
        env:
          INPUT_GITHUB_TOKEN: ${{ github.token }}
          INPUT_CHECK_NAME: Test Results (Docker Image)
          INPUT_FILES: "artifacts/**/*.xml"

      - name: Scan for vulnerabilities
        id: scan
        uses: crazy-max/ghaction-container-scan@v1
        with:
          image: enricomi/publish-unit-test-result-action:latest
          dockerfile: ./Dockerfile
          annotations: true
      - name: Upload SARIF artifact
        uses: actions/upload-artifact@v3
        with:
          name: SARIF
          path: ${{ steps.scan.outputs.sarif }}
      - name: Upload SARIF file
        if: always() && steps.scan.outputs.sarif != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  publish-composite:
    name: Publish Test Results (${{ matrix.os-label }} python ${{ matrix.python }})
    needs: test
    # we run the action from this branch whenever we can (when it runs in our repo's context)
    if: >
      always() &&
      github.event.sender.login != 'dependabot[bot]' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
      pull-requests: write

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python: ["installed", "3.6"]
        include:
          - os: macos-latest
            os-label: macOS
          - os: ubuntu-latest
            os-label: Linux
          - os: windows-latest
            os-label: Windows

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        if: matrix.python != 'installed'
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}

      - name: Detect OS
        id: os
        env:
          OS: ${{ matrix.os }}
        run: |
          case "$OS" in
            ubuntu*)
              echo "::set-output name=path-sep::/"
              echo "::set-output name=pip-cache::~/.cache/pip"
              ;;
            macos*)
              echo "::set-output name=path-sep::/"
              echo "::set-output name=pip-cache::~/Library/Caches/pip"
              ;;
            windows*)
              echo "::set-output name=path-sep::\\"
              echo "::set-output name=pip-cache::~\\AppData\\Local\\pip\\Cache"
              ;;
          esac
        shell: bash

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Cache PIP Packages
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ steps.os.outputs.pip-cache }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'composite/action.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install package wheel
        if: steps.cache.outputs.cache-hit != 'true' && runner.os == 'Windows'
        run: python3 -m pip install wheel

      - name: Publish Test Results
        uses: ./composite
        with:
          check_name: Test Results (${{ matrix.os-label }} python ${{ matrix.python }})
          files: "artifacts${{ steps.os.outputs.path-sep }}**${{ steps.os.outputs.path-sep }}*.xml"

  publish-composite-extra:
    name: Publish Test Results (setup-python)
    needs: test
    # we run the action from this branch whenever we can (when it runs in our repo's context)
    if: >
      always() &&
      github.event.sender.login != 'dependabot[bot]' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache PIP Packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-extra-${{ hashFiles('**/requirements.txt', 'composite/action.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-extra-
            ${{ runner.os }}-pip-

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish Test Results
        uses: ./composite
        with:
          check_name: Test Results (setup-python)
          comment_mode: create new
          files: "artifacts/**/*.xml"

  publish-test-files:
    name: Publish Test Files
    # does not really depend on 'tests' but can be executed together with other publish tasks just for good taste
    needs: test
    # we run the action from this branch whenever we can (when it runs in our repo's context)
    if: >
      always() &&
      github.event.sender.login != 'dependabot[bot]' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy test junit xml files
        run: |
          mkdir -p test-files
          cp -v python/test/files/*.xml test-files/

      - name: Prepare publish action from this branch
        run: |
          sed --in-place "s/image: .*/image: 'Dockerfile'/" action.yml

      - name: Publish Test Results
        id: publish
        uses: ./
        with:
          check_name: Test Results (Test Files)
          fail_on: nothing
          files: "test-files/**.xml"
          json_file: "tests.json"
          LOG_LEVEL: DEBUG

      - name: JSON file
        if: always() && steps.publish.conclusion == 'success'
        run: |
          jq . tests.json
          jq .conclusion tests.json

      - name: JSON output
        if: always() && steps.publish.conclusion == 'success'
        env:
          TITLE: ${{ fromJSON( steps.publish.outputs.json ).title }}
          SUMMARY: ${{ fromJSON( steps.publish.outputs.json ).summary }}
          CONCLUSION: ${{ fromJSON( steps.publish.outputs.json ).conclusion }}
          STATS: ${{ toJSON( fromJSON( steps.publish.outputs.json ).stats ) }}
          STATS_WITH_DELTA: ${{ toJSON( fromJSON( steps.publish.outputs.json ).stats_with_delta ) }}
          COMMIT: ${{ fromJSON( steps.publish.outputs.json ).stats.commit }}
          REFERENCE: ${{ fromJSON( steps.publish.outputs.json ).stats_with_delta.reference_commit }}
          ANNOTATIONS: ${{ fromJSON( steps.publish.outputs.json ).annotations }}
        run: |
          echo "title=$TITLE"
          echo "summary=$SUMMARY"
          echo "conclusion=$CONCLUSION"
          echo "stats=$STATS"
          echo "stats-with-delta=$STATS_WITH_DELTA"
          echo "commit=$COMMIT"
          echo "reference=$REFERENCE"
          echo "annotations=$ANNOTATIONS"

          echo
          echo "JSON output:"
          cat <<EOF
          ${{ steps.publish.outputs.json }}
          EOF
          echo

          if [[ "$CONCLUSION" != "success" ]]
          then
            echo 'conclusion != "success"'
            exit 1
          fi

  config-deploy:
    name: Configure Deployment
    needs: test
    # do not build or deploy on forked repositories
    if: github.repository_owner == 'EnricoMi'
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.action.outputs.image }}
      image-exists: ${{ steps.image.outputs.exists }}
      image-version: ${{ steps.action.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract action image and version
        # we deploy from a specific commit on master (the one that mentions a new version the first time)
        # so we need to tell docker/metadata-action to extract docker tags from that version
        id: action
        run: |
          image=$(grep -A 10 "^runs:" action.yml | grep -E "\s+image: 'docker://ghcr.io/enricomi/publish-unit-test-result-action:" | sed -E -e "s/^\s+image:\s*'docker:\/\///" -e "s/'\s*$//")
          version=$(cut -d : -f 2 <<< "$image")
          echo "::set-output name=image::$image"
          echo "::set-output name=version::$version"
        shell: bash

      - name: Check action image existence
        id: image
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          if docker manifest inspect '${{ steps.action.outputs.image }}'
          then
            echo "::set-output name=exists::true"
          fi
        shell: bash

  deploy:
    name: Deploy to GitHub
    needs: [test, publish-dockerfile, publish-docker-image, publish-composite, publish-composite-extra, publish-test-files, config-deploy]

    # do not build or deploy on forked repositories
    if: github.repository_owner == 'EnricoMi'
    runs-on: ubuntu-latest
    steps:
      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/EnricoMi/publish-unit-test-result-action
          tags: |
            type=sha
            type=ref,event=tag
            type=match,pattern=(v\d+),group=1
            type=match,pattern=(v\d+.\d+),group=1
            type=match,pattern=(v\d+.\d+.\d+),group=1
            type=semver,pattern=v{{major}},value=${{ needs.config-deploy.outputs.image-version }}.0
            type=semver,pattern=v{{major}}.{{minor}},value=${{ needs.config-deploy.outputs.image-version }}.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          pull: true
          # deploy image actions from commits pushed to master and
          # deploy Dockerfile actions from pushed version tags (no major versions)
          push: |
            ${{
              github.event_name == 'push' && (
                needs.config-deploy.outputs.image != 'Dockerfile' && needs.config-deploy.outputs.image-exists != 'true' && github.ref == 'refs/heads/master' ||
                needs.config-deploy.outputs.image == 'Dockerfile' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '.')
              )
            }}

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}
