name: CI/CD

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

jobs:
  test:
    name: Test (os=${{ matrix.os }}, py=${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        os:
          - macos-10.15
          - macos-11.0
          - macos-latest
          - ubuntu-16.04
          - ubuntu-18.04
          - ubuntu-20.04
          - ubuntu-latest
          - windows-2016
          - windows-2019
          - windows-latest
        python-version: [3.6]

        include:
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.8

          - os: ubuntu-latest
            python-version: 3.7
          - os: ubuntu-latest
            python-version: 3.8

          - os: windows-latest
            python-version: 3.7
          - os: windows-latest
            python-version: 3.8

    steps:
      - name: Setup Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get install language-pack-en language-pack-de

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade --force --no-cache-dir pip
          pip install --force --no-cache-dir -r requirements.txt
          pip install --force --no-cache-dir pytest mock

      - name: PyTest
        env:
          PYTHONPATH: ..
        run: |
          cd test
          python -m pytest --capture=tee-sys --continue-on-collection-errors --junit-xml ../test-results/pytest.xml

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results (os=${{ matrix.os }}, py=${{ matrix.python-version }})
          path: |
            test-results/*.xml
            unit-test-results.json

  test-build:
    name: Build
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Run Buildx
        run: docker buildx build --output "type=image,push=false" .

  publish:
    name: Publish Unit Test Results
    needs: test
    # we run the action from this branch whenever we can (when it runs in our repo's context)
    if: >
      always() &&
      github.event.sender.login != 'dependabot[bot]' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Prepare publish action from this branch
        run: |
          sed --in-place "s/image: .*/image: 'Dockerfile'/" action.yml

      - name: Publish Unit Test Results
        uses: ./
        with:
          check_name: Unit Test Results (this branch)
          files: "artifacts/**/*.xml"

  config-deploy:
    name: Configure Deployment
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.action.outputs.image }}
      image-exists: ${{ steps.image.outputs.exists }}
      image-version: ${{ steps.action.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract action image and version
        id: action
        run: |
          image=$(grep -A 10 "^runs:" action.yml | grep -E "\s+image: 'docker://ghcr.io/enricomi/publish-unit-test-result-action:" | sed -E -e "s/^\s+image:\s*'docker:\/\///" -e "s/'\s*$//")
          version=$(cut -d : -f 2 <<< "$image")
          echo "::set-output name=image::$image"
          echo "::set-output name=version::$version"
        shell: bash

      - name: Check action image existence
        id: image
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          if docker manifest inspect '${{ steps.action.outputs.image }}'
          then
            echo "::set-output name=exists::true"
          fi
        shell: bash

  deploy:
    name: Deploy to GitHub
    needs: [test, config-deploy]

    # deploy image actions from commits pushed to master and
    # deploy Dockerfile actions from pushed version tags (no major versions)
    # but not on forked repositories
    if: >
      github.event_name == 'push' && (
        needs.config.outputs.image != 'Dockerfile' && needs.config.outputs.image-exists != 'true' && github.ref == 'refs/heads/master' ||
        needs.config.outputs.image == 'Dockerfile' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '.')
      ) &&
      github.repository_owner == 'EnricoMi'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker meta
        id: docker-meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ghcr.io/EnricoMi/publish-unit-test-result-action
          tags: |
            type=sha
            type=ref,event=tag
            type=match,pattern=(v\d+),group=1
            type=match,pattern=(v\d+.\d+),group=1
            type=match,pattern=(v\d+.\d+.\d+),group=1
            type=semver,pattern=v{{major}},value=${{ needs.config.outputs.image-version }}.0
            type=semver,pattern=v{{major}}.{{minor}},value=${{ needs.config.outputs.image-version }}.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ steps.docker-meta.outputs.tags }}
          labels: |
            ${{ steps.docker-meta.outputs.labels }}
          pull: true
          push: false
