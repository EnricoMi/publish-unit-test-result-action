name: Publish

on:
  workflow_call:

jobs:
  publish-dockerfile:
    name: Publish Test Results (Dockerfile)
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Prepare publish action from this branch
        run: |
          sed --in-place "s/image: .*/image: 'Dockerfile'/" action.yml
        shell: bash

      - name: Publish Test Results
        id: test-results
        uses: ./
        with:
          check_name: Test Results (Dockerfile)
          files: "artifacts/**/*.xml"
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"
          log_level: DEBUG

      - name: JSON output
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results.outputs.json }}'
          json_file: 'tests.json'

  publish-docker-image:
    name: Publish Test Results (Docker Image ${{ matrix.arch }})
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: ${{ matrix.arch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          load: true
          push: false
          platforms: linux/${{ matrix.arch }}
          tags: local/enricomi/publish-unit-test-result-action:latest
          outputs: type=docker
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Publish Test Results
        id: test-results
        if: (!cancelled())
        uses: ./docker
        with:
          check_name: Test Results (Docker Image ${{ matrix.arch }})
          files: "artifacts/**/*.xml"
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"
          docker_registry: local
          docker_tag: latest
          log_level: DEBUG

      - name: JSON output
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results.outputs.json }}'
          json_file: 'tests.json'

      - name: Scan for vulnerabilities
        id: scan
        uses: crazy-max/ghaction-container-scan@v3
        continue-on-error: true
        with:
          image: local/enricomi/publish-unit-test-result-action:latest
          dockerfile: ./Dockerfile
          annotations: true
      - name: Upload SARIF artifact
        if: steps.scan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: SARIF ${{ matrix.arch }}
          path: ${{ steps.scan.outputs.sarif }}
      - name: Upload SARIF file
        if: (!cancelled() && steps.scan.outputs.sarif != '')
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  publish-linux:
    name: Publish Test Results (${{ matrix.os-label }} python ${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
      pull-requests: write

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        include:
          - os: ubuntu-latest
            os-label: Linux
            python: "3.8"
          - os: ubuntu-latest
            os-label: Linux
            python: "venv"
          - os: ubuntu-latest
            os-label: Linux
            python: "installed"
          - os: ubuntu-24.04
            os-label: Linux 24.04
            python: "installed"

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        if: matrix.python != 'installed' && matrix.python != 'venv'
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install virtualenv
        if: matrix.python == 'venv'
        run: python3 -m pip install virtualenv
        shell: bash

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Publish Test Results
        id: test-results
        uses: ./linux
        with:
          check_name: Test Results (${{ matrix.os-label }} python ${{ matrix.python }})
          files: artifacts/**/*.xml
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"

      - name: JSON output
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results.outputs.json }}'
          json_file: 'tests.json'

  publish-macos:
    name: Publish Test Results (${{ matrix.os-label }} python ${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
      pull-requests: write

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        include:
          - os: macos-latest
            os-label: macOS
            python: "venv"
          - os: macos-latest
            os-label: macOS
            python: "installed"

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        if: matrix.python != 'installed' && matrix.python != 'venv'
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Setup Python
        if: matrix.python == 'venv'
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install virtualenv
        if: matrix.python == 'venv'
        run: python3 -m pip install virtualenv
        shell: bash

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Publish Test Results
        id: test-results
        uses: ./macos
        with:
          check_name: Test Results (${{ matrix.os-label }} python ${{ matrix.python }})
          files: artifacts/**/*.xml
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"

      - name: JSON output
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results.outputs.json }}'
          json_file: 'tests.json'

  publish-windows:
    name: Publish Test Results (${{ matrix.os-label }} python ${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
      pull-requests: write

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        include:
          - os: windows-latest
            os-label: Windows
            python: "installed"
          - os: windows-latest
            os-label: Windows
            python: "venv"

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        if: matrix.python != 'installed' && matrix.python != 'venv'
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install virtualenv
        if: matrix.python == 'venv'
        run: python3 -m pip install virtualenv
        shell: bash

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Publish Test Results
        id: test-results
        uses: ./windows
        with:
          check_name: Test Results (${{ matrix.os-label }} python ${{ matrix.python }})
          files: artifacts\**\*.xml
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"

      - name: JSON output
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results.outputs.json }}'
          json_file: 'tests.json'

      - name: Publish Test Results (Bash)
        id: test-results-bash
        if: (!cancelled() && steps.test-results.outcome != 'skipped')
        uses: ./windows/bash
        with:
          check_name: Test Results (${{ matrix.os-label }} bash python ${{ matrix.python }})
          files: artifacts\**\*.xml
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"

      - name: JSON output (Bash)
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results-bash.outputs.json }}'
          json_file: 'tests.json'

  publish-composite:
    name: Publish Test Results (${{ matrix.os-label }} composite)
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
      pull-requests: write

    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        # test *-latest and newer (because newer eventually become 'latest' and should be tested to work before that)
        include:
          - os: macos-latest
            os-label: macOS
          - os: ubuntu-latest
            os-label: Linux
          - os: windows-latest
            os-label: Windows

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Publish Test Results
        id: test-results
        uses: ./composite
        with:
          check_name: Test Results (${{ matrix.os-label }} composite)
          files: |
            artifacts/**/*.xml
            artifacts\**\*.xml
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"

      - name: JSON output
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results.outputs.json }}'
          json_file: 'tests.json'

  publish-test-files:
    name: Publish Test Files
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Copy test result files
        run: cp -rv python/test/files test-files
        shell: bash

      - name: Prepare publish action from this branch
        run: |
          sed --in-place "s/image: .*/image: 'Dockerfile'/" action.yml
        shell: bash

      - name: Publish Test Results
        id: test-results
        uses: ./
        with:
          check_name: Test Results (Test Files)
          fail_on: nothing
          files: |
            test-files/**/*.xml
            test-files/**/*.trx
            test-files/**/*.json
          junit_files: "test-files/junit-xml/**/*.xml"
          nunit_files: "test-files/nunit/**/*.xml"
          xunit_files: "test-files/xunit/**/*.xml"
          trx_files: "test-files/trx/**/*.trx"
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"
          log_level: DEBUG

      - name: JSON output
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results.outputs.json }}'
          json_file: 'tests.json'

  publish-test-file:
    name: Publish Test File
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Copy test junit xml files
        run: cp -rv python/test/files/junit-xml test-files
        shell: bash

      - name: Prepare publish action from this branch
        run: |
          sed --in-place "s/image: .*/image: 'Dockerfile'/" action.yml
        shell: bash

      - name: Publish Test Results
        id: test-results
        uses: ./
        with:
          check_name: Test Results (Test File)
          fail_on: nothing
          files: "test-files/pytest/junit.gloo.standalone.xml"
          json_file: "tests.json"
          json_suite_details: true
          json_test_case_results: true
          report_suite_logs: "any"
          log_level: DEBUG

      - name: JSON output
        uses: ./misc/action/json-output
        with:
          json: '${{ steps.test-results.outputs.json }}'
          json_file: 'tests.json'
